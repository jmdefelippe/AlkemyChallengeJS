{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\Joan\\\\Desktop\\\\AlkemyReactChallenge\\\\cliente\\\\context\\\\operaciones\\\\operacionState.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useReducer } from 'react';\nimport operacionContext from './operacionContext';\nimport operacionReducer from './operacionReducer';\nimport { FORMULARIO_OPERACION, OBTENER_OPERACIONES, AGREGAR_OPERACION, OPERACION_EXITOSA, OPERACION_ERROR, OCULTAR_ALERTA, VALIDAR_FORMULARIO, OPERACION_ACTUAL, ELIMINAR_OPERACION, LIMPIAR_STATE, ACTUALIZAR_OPERACION, LIMPIAR_OPERACION, CALCULAR_BALANCE, OPERACIONES_CATEGORIAS, TOTAL_INGRESOS, TOTAL_EGRESOS } from '../../types';\nimport clienteAxios from '../../config/axios';\n\nvar OperacionState = function OperacionState(props) {\n  _s();\n\n  var initialState = {\n    operaciones: [],\n    nuevaOperacion: false,\n    errorformulario: false,\n    operacion: null,\n    mensaje: {},\n    balance: 0,\n    ingresos: 0,\n    egresos: 0\n  }; // dispatch para ejecutar las acciones\n\n  var _useReducer = useReducer(operacionReducer, initialState),\n      state = _useReducer[0],\n      dispatch = _useReducer[1]; // serie de funciones para el CRUD\n\n\n  var mostrarFormulario = function mostrarFormulario() {\n    dispatch({\n      type: FORMULARIO_OPERACION\n    });\n  }; // obtener los operaciones\n\n\n  var obtenerOperaciones = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var resultado, alerta;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return clienteAxios.get('/api/operaciones');\n\n            case 3:\n              resultado = _context.sent;\n              dispatch({\n                type: OBTENER_OPERACIONES,\n                payload: resultado.data.operaciones\n              });\n              _context.next = 11;\n              break;\n\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context[\"catch\"](0);\n              alerta = {\n                msg: 'Hubo un error',\n                categoria: 'alerta-error'\n              };\n              dispatch({\n                type: OPERACION_ERROR,\n                payload: alerta\n              });\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 7]]);\n    }));\n\n    return function obtenerOperaciones() {\n      return _ref.apply(this, arguments);\n    };\n  }(); // agregar nueva operacion\n\n\n  var agregarOperacion = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(operacion) {\n      var resultado, alerta, _alerta;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              _context2.next = 3;\n              return clienteAxios.post('/api/operaciones', operacion);\n\n            case 3:\n              resultado = _context2.sent;\n              alerta = {\n                msg: 'Operación agregada exitosamente',\n                categoria: 'alerta-ok'\n              };\n              dispatch({\n                type: OPERACION_EXITOSA,\n                payload: alerta\n              }); // insertar el operacion en el state\n\n              dispatch({\n                type: AGREGAR_OPERACION,\n                payload: resultado.data\n              });\n              _context2.next = 13;\n              break;\n\n            case 9:\n              _context2.prev = 9;\n              _context2.t0 = _context2[\"catch\"](0);\n              _alerta = {\n                msg: 'Hubo un error',\n                categoria: 'alerta-error'\n              };\n              dispatch({\n                type: OPERACION_ERROR,\n                payload: _alerta\n              });\n\n            case 13:\n              // Limpia la alerta después de 3 segundos\n              setTimeout(function () {\n                dispatch({\n                  type: OCULTAR_ALERTA\n                });\n              }, 3000);\n\n            case 14:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[0, 9]]);\n    }));\n\n    return function agregarOperacion(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }(); // validar el formulario por errores\n\n\n  var mostrarError = function mostrarError() {\n    dispatch({\n      type: VALIDAR_FORMULARIO\n    });\n  }; // selecciona el operacion que el usuario dio click\n\n\n  var operacionActual = function operacionActual(operacionId) {\n    dispatch({\n      type: OPERACION_ACTUAL,\n      payload: operacionId\n    });\n  }; // elimina un operacion\n\n\n  var eliminarOperacion = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(operacionId) {\n      var alerta, _alerta2;\n\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.prev = 0;\n              _context3.next = 3;\n              return clienteAxios[\"delete\"](\"/api/operaciones/\".concat(operacionId));\n\n            case 3:\n              alerta = {\n                msg: 'Operación eliminada exitosamente',\n                categoria: 'alerta-ok'\n              };\n              dispatch({\n                type: OPERACION_EXITOSA,\n                payload: alerta\n              });\n              dispatch({\n                type: ELIMINAR_OPERACION,\n                payload: operacionId\n              });\n              _context3.next = 12;\n              break;\n\n            case 8:\n              _context3.prev = 8;\n              _context3.t0 = _context3[\"catch\"](0);\n              _alerta2 = {\n                msg: 'Hubo un error',\n                categoria: 'alerta-error'\n              };\n              dispatch({\n                type: OPERACION_ERROR,\n                payload: _alerta2\n              });\n\n            case 12:\n              // Limpia la alerta después de 3 segundos\n              setTimeout(function () {\n                dispatch({\n                  type: OCULTAR_ALERTA\n                });\n              }, 3000);\n\n            case 13:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, null, [[0, 8]]);\n    }));\n\n    return function eliminarOperacion(_x2) {\n      return _ref3.apply(this, arguments);\n    };\n  }(); // edita o modifica una operacion\n\n\n  var actualizarOperacion = /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(operacion) {\n      var resultado;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.prev = 0;\n              _context4.next = 3;\n              return clienteAxios.put(\"/api/operaciones/\".concat(operacion._id), operacion);\n\n            case 3:\n              resultado = _context4.sent;\n              dispatch({\n                type: ACTUALIZAR_OPERACION,\n                payload: resultado.data.operacion\n              });\n              _context4.next = 10;\n              break;\n\n            case 7:\n              _context4.prev = 7;\n              _context4.t0 = _context4[\"catch\"](0);\n              console.log(_context4.t0);\n\n            case 10:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, null, [[0, 7]]);\n    }));\n\n    return function actualizarOperacion(_x3) {\n      return _ref4.apply(this, arguments);\n    };\n  }(); // elimina la operacion seleccionada\n\n\n  var limpiarOperacion = function limpiarOperacion() {\n    dispatch({\n      type: LIMPIAR_OPERACION\n    });\n  };\n\n  var calcularTotalIngresos = /*#__PURE__*/function () {\n    var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              dispatch({\n                type: TOTAL_INGRESOS\n              });\n\n            case 1:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n\n    return function calcularTotalIngresos() {\n      return _ref5.apply(this, arguments);\n    };\n  }();\n\n  var calcularTotalEgresos = /*#__PURE__*/function () {\n    var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              dispatch({\n                type: TOTAL_EGRESOS\n              });\n\n            case 1:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }));\n\n    return function calcularTotalEgresos() {\n      return _ref6.apply(this, arguments);\n    };\n  }(); // calcular el balance: total ingresos - total egresos\n\n\n  var calcularBalance = /*#__PURE__*/function () {\n    var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n      return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              dispatch({\n                type: CALCULAR_BALANCE\n              });\n\n            case 1:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7);\n    }));\n\n    return function calcularBalance() {\n      return _ref7.apply(this, arguments);\n    };\n  }();\n\n  var calcularTotales = /*#__PURE__*/function () {\n    var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {\n      return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              _context8.next = 2;\n              return obtenerOperaciones();\n\n            case 2:\n              calcularTotalIngresos();\n              calcularTotalEgresos();\n              calcularBalance();\n\n            case 5:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8);\n    }));\n\n    return function calcularTotales() {\n      return _ref8.apply(this, arguments);\n    };\n  }();\n\n  var obtenerOperacionesCategorias = /*#__PURE__*/function () {\n    var _ref9 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(categoria) {\n      return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              _context9.next = 2;\n              return obtenerOperaciones();\n\n            case 2:\n              dispatch({\n                type: OPERACIONES_CATEGORIAS,\n                payload: categoria\n              });\n\n            case 3:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, _callee9);\n    }));\n\n    return function obtenerOperacionesCategorias(_x4) {\n      return _ref9.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(operacionContext.Provider, {\n    value: {\n      operaciones: state.operaciones,\n      formulario: state.formulario,\n      errorformulario: state.errorformulario,\n      operacion: state.operacion,\n      mensaje: state.mensaje,\n      balance: state.balance,\n      ingresos: state.ingresos,\n      egresos: state.egresos,\n      mostrarFormulario: mostrarFormulario,\n      obtenerOperaciones: obtenerOperaciones,\n      agregarOperacion: agregarOperacion,\n      mostrarError: mostrarError,\n      operacionActual: operacionActual,\n      eliminarOperacion: eliminarOperacion,\n      actualizarOperacion: actualizarOperacion,\n      calcularTotalIngresos: calcularTotalIngresos,\n      calcularTotalEgresos: calcularTotalEgresos,\n      calcularBalance: calcularBalance,\n      obtenerOperacionesCategorias: obtenerOperacionesCategorias,\n      calcularTotales: calcularTotales\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 9\n    }\n  }, props.children);\n};\n\n_s(OperacionState, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n\n_c = OperacionState;\nexport default OperacionState;\n\nvar _c;\n\n$RefreshReg$(_c, \"OperacionState\");","map":{"version":3,"sources":["C:/Users/Joan/Desktop/AlkemyReactChallenge/cliente/context/operaciones/operacionState.js"],"names":["React","useReducer","operacionContext","operacionReducer","FORMULARIO_OPERACION","OBTENER_OPERACIONES","AGREGAR_OPERACION","OPERACION_EXITOSA","OPERACION_ERROR","OCULTAR_ALERTA","VALIDAR_FORMULARIO","OPERACION_ACTUAL","ELIMINAR_OPERACION","LIMPIAR_STATE","ACTUALIZAR_OPERACION","LIMPIAR_OPERACION","CALCULAR_BALANCE","OPERACIONES_CATEGORIAS","TOTAL_INGRESOS","TOTAL_EGRESOS","clienteAxios","OperacionState","props","initialState","operaciones","nuevaOperacion","errorformulario","operacion","mensaje","balance","ingresos","egresos","state","dispatch","mostrarFormulario","type","obtenerOperaciones","get","resultado","payload","data","alerta","msg","categoria","agregarOperacion","post","setTimeout","mostrarError","operacionActual","operacionId","eliminarOperacion","actualizarOperacion","put","_id","console","log","limpiarOperacion","calcularTotalIngresos","calcularTotalEgresos","calcularBalance","calcularTotales","obtenerOperacionesCategorias","formulario","children"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AAEA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,SACIC,oBADJ,EAEIC,mBAFJ,EAGIC,iBAHJ,EAIIC,iBAJJ,EAKIC,eALJ,EAMIC,cANJ,EAOIC,kBAPJ,EAQIC,gBARJ,EASIC,kBATJ,EAUIC,aAVJ,EAWIC,oBAXJ,EAYIC,iBAZJ,EAaIC,gBAbJ,EAcIC,sBAdJ,EAeIC,cAfJ,EAgBIC,aAhBJ,QAiBO,aAjBP;AAmBA,OAAOC,YAAP,MAAyB,oBAAzB;;AAEA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAAAC,KAAK,EAAI;AAAA;;AAE5B,MAAMC,YAAY,GAAG;AACjBC,IAAAA,WAAW,EAAG,EADG;AAEjBC,IAAAA,cAAc,EAAG,KAFA;AAGjBC,IAAAA,eAAe,EAAE,KAHA;AAIjBC,IAAAA,SAAS,EAAE,IAJM;AAKjBC,IAAAA,OAAO,EAAE,EALQ;AAMjBC,IAAAA,OAAO,EAAE,CANQ;AAOjBC,IAAAA,QAAQ,EAAE,CAPO;AAQjBC,IAAAA,OAAO,EAAE;AARQ,GAArB,CAF4B,CAa5B;;AAb4B,oBAcF9B,UAAU,CAACE,gBAAD,EAAmBoB,YAAnB,CAdR;AAAA,MAcrBS,KAdqB;AAAA,MAcdC,QAdc,mBAgB5B;;;AACA,MAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,GAAM;AAC5BD,IAAAA,QAAQ,CAAC;AACLE,MAAAA,IAAI,EAAE/B;AADD,KAAD,CAAR;AAGH,GAJD,CAjB4B,CAuB5B;;;AACA,MAAMgC,kBAAkB;AAAA,wEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAEKhB,YAAY,CAACiB,GAAb,CAAiB,kBAAjB,CAFL;;AAAA;AAEbC,cAAAA,SAFa;AAInBL,cAAAA,QAAQ,CAAC;AACLE,gBAAAA,IAAI,EAAE9B,mBADD;AAELkC,gBAAAA,OAAO,EAAED,SAAS,CAACE,IAAV,CAAehB;AAFnB,eAAD,CAAR;AAJmB;AAAA;;AAAA;AAAA;AAAA;AASbiB,cAAAA,MATa,GASJ;AACXC,gBAAAA,GAAG,EAAE,eADM;AAEXC,gBAAAA,SAAS,EAAE;AAFA,eATI;AAanBV,cAAAA,QAAQ,CAAC;AACLE,gBAAAA,IAAI,EAAE3B,eADD;AAEL+B,gBAAAA,OAAO,EAAEE;AAFJ,eAAD,CAAR;;AAbmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAlBL,kBAAkB;AAAA;AAAA;AAAA,KAAxB,CAxB4B,CA4C5B;;;AACA,MAAMQ,gBAAgB;AAAA,yEAAG,kBAAMjB,SAAN;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAGOP,YAAY,CAACyB,IAAb,CAAkB,kBAAlB,EAAsClB,SAAtC,CAHP;;AAAA;AAGXW,cAAAA,SAHW;AAKXG,cAAAA,MALW,GAKF;AACXC,gBAAAA,GAAG,EAAE,iCADM;AAEXC,gBAAAA,SAAS,EAAE;AAFA,eALE;AAUjBV,cAAAA,QAAQ,CAAC;AACLE,gBAAAA,IAAI,EAAE5B,iBADD;AAELgC,gBAAAA,OAAO,EAAEE;AAFJ,eAAD,CAAR,CAViB,CAejB;;AACAR,cAAAA,QAAQ,CAAC;AACLE,gBAAAA,IAAI,EAAE7B,iBADD;AAELiC,gBAAAA,OAAO,EAAED,SAAS,CAACE;AAFd,eAAD,CAAR;AAhBiB;AAAA;;AAAA;AAAA;AAAA;AAqBXC,cAAAA,OArBW,GAqBF;AACXC,gBAAAA,GAAG,EAAE,eADM;AAEXC,gBAAAA,SAAS,EAAE;AAFA,eArBE;AAyBjBV,cAAAA,QAAQ,CAAC;AACLE,gBAAAA,IAAI,EAAE3B,eADD;AAEL+B,gBAAAA,OAAO,EAAEE;AAFJ,eAAD,CAAR;;AAzBiB;AA+BrB;AACAK,cAAAA,UAAU,CAAC,YAAM;AACbb,gBAAAA,QAAQ,CAAC;AACLE,kBAAAA,IAAI,EAAE1B;AADD,iBAAD,CAAR;AAGH,eAJS,EAIP,IAJO,CAAV;;AAhCqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAhBmC,gBAAgB;AAAA;AAAA;AAAA,KAAtB,CA7C4B,CAoF5B;;;AACA,MAAMG,YAAY,GAAG,SAAfA,YAAe,GAAM;AACvBd,IAAAA,QAAQ,CAAC;AACLE,MAAAA,IAAI,EAAEzB;AADD,KAAD,CAAR;AAGH,GAJD,CArF4B,CA2F5B;;;AACA,MAAMsC,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,WAAW,EAAI;AACnChB,IAAAA,QAAQ,CAAC;AACLE,MAAAA,IAAI,EAAExB,gBADD;AAEL4B,MAAAA,OAAO,EAAEU;AAFJ,KAAD,CAAR;AAIH,GALD,CA5F4B,CAmG5B;;;AACA,MAAMC,iBAAiB;AAAA,yEAAG,kBAAMD,WAAN;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAGZ7B,YAAY,UAAZ,4BAAwC6B,WAAxC,EAHY;;AAAA;AAKZR,cAAAA,MALY,GAKH;AACXC,gBAAAA,GAAG,EAAE,kCADM;AAEXC,gBAAAA,SAAS,EAAE;AAFA,eALG;AAUlBV,cAAAA,QAAQ,CAAC;AACLE,gBAAAA,IAAI,EAAE5B,iBADD;AAELgC,gBAAAA,OAAO,EAAEE;AAFJ,eAAD,CAAR;AAKAR,cAAAA,QAAQ,CAAC;AACLE,gBAAAA,IAAI,EAAEvB,kBADD;AAEL2B,gBAAAA,OAAO,EAAEU;AAFJ,eAAD,CAAR;AAfkB;AAAA;;AAAA;AAAA;AAAA;AAqBZR,cAAAA,QArBY,GAqBH;AACXC,gBAAAA,GAAG,EAAE,eADM;AAEXC,gBAAAA,SAAS,EAAE;AAFA,eArBG;AAyBlBV,cAAAA,QAAQ,CAAC;AACLE,gBAAAA,IAAI,EAAE3B,eADD;AAEL+B,gBAAAA,OAAO,EAAEE;AAFJ,eAAD,CAAR;;AAzBkB;AA+BtB;AACAK,cAAAA,UAAU,CAAC,YAAM;AACbb,gBAAAA,QAAQ,CAAC;AACLE,kBAAAA,IAAI,EAAE1B;AADD,iBAAD,CAAR;AAGH,eAJS,EAIP,IAJO,CAAV;;AAhCsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAjByC,iBAAiB;AAAA;AAAA;AAAA,KAAvB,CApG4B,CA2I5B;;;AACA,MAAMC,mBAAmB;AAAA,yEAAG,kBAAMxB,SAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAEIP,YAAY,CAACgC,GAAb,4BAAqCzB,SAAS,CAAC0B,GAA/C,GAAsD1B,SAAtD,CAFJ;;AAAA;AAEdW,cAAAA,SAFc;AAGpBL,cAAAA,QAAQ,CAAC;AACLE,gBAAAA,IAAI,EAAErB,oBADD;AAELyB,gBAAAA,OAAO,EAAED,SAAS,CAACE,IAAV,CAAeb;AAFnB,eAAD,CAAR;AAHoB;AAAA;;AAAA;AAAA;AAAA;AAQpB2B,cAAAA,OAAO,CAACC,GAAR;;AARoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAnBJ,mBAAmB;AAAA;AAAA;AAAA,KAAzB,CA5I4B,CAwJ5B;;;AACA,MAAMK,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAM;AAC3BvB,IAAAA,QAAQ,CAAC;AACLE,MAAAA,IAAI,EAAEpB;AADD,KAAD,CAAR;AAGH,GAJD;;AAMA,MAAM0C,qBAAqB;AAAA,yEAAG;AAAA;AAAA;AAAA;AAAA;AAC1BxB,cAAAA,QAAQ,CAAC;AACLE,gBAAAA,IAAI,EAAEjB;AADD,eAAD,CAAR;;AAD0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAArBuC,qBAAqB;AAAA;AAAA;AAAA,KAA3B;;AAMA,MAAMC,oBAAoB;AAAA,yEAAG;AAAA;AAAA;AAAA;AAAA;AACzBzB,cAAAA,QAAQ,CAAC;AACLE,gBAAAA,IAAI,EAAEhB;AADD,eAAD,CAAR;;AADyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAApBuC,oBAAoB;AAAA;AAAA;AAAA,KAA1B,CArK4B,CA4K5B;;;AACA,MAAMC,eAAe;AAAA,yEAAG;AAAA;AAAA;AAAA;AAAA;AACpB1B,cAAAA,QAAQ,CAAC;AACLE,gBAAAA,IAAI,EAAEnB;AADD,eAAD,CAAR;;AADoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAf2C,eAAe;AAAA;AAAA;AAAA,KAArB;;AAMA,MAAMC,eAAe;AAAA,yEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACdxB,kBAAkB,EADJ;;AAAA;AAGpBqB,cAAAA,qBAAqB;AACrBC,cAAAA,oBAAoB;AACpBC,cAAAA,eAAe;;AALK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAfC,eAAe;AAAA;AAAA;AAAA,KAArB;;AAQA,MAAMC,4BAA4B;AAAA,yEAAG,kBAAMlB,SAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAE3BP,kBAAkB,EAFS;;AAAA;AAIjCH,cAAAA,QAAQ,CAAC;AACLE,gBAAAA,IAAI,EAAElB,sBADD;AAELsB,gBAAAA,OAAO,EAAEI;AAFJ,eAAD,CAAR;;AAJiC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAA5BkB,4BAA4B;AAAA;AAAA;AAAA,KAAlC;;AAYA,SACI,MAAC,gBAAD,CAAkB,QAAlB;AACI,IAAA,KAAK,EAAE;AACHrC,MAAAA,WAAW,EAAEQ,KAAK,CAACR,WADhB;AAEHsC,MAAAA,UAAU,EAAE9B,KAAK,CAAC8B,UAFf;AAGHpC,MAAAA,eAAe,EAAEM,KAAK,CAACN,eAHpB;AAIHC,MAAAA,SAAS,EAAEK,KAAK,CAACL,SAJd;AAKHC,MAAAA,OAAO,EAAEI,KAAK,CAACJ,OALZ;AAMHC,MAAAA,OAAO,EAAEG,KAAK,CAACH,OANZ;AAOHC,MAAAA,QAAQ,EAAEE,KAAK,CAACF,QAPb;AAQHC,MAAAA,OAAO,EAAEC,KAAK,CAACD,OARZ;AASHG,MAAAA,iBAAiB,EAAjBA,iBATG;AAUHE,MAAAA,kBAAkB,EAAlBA,kBAVG;AAWHQ,MAAAA,gBAAgB,EAAhBA,gBAXG;AAYHG,MAAAA,YAAY,EAAZA,YAZG;AAaHC,MAAAA,eAAe,EAAfA,eAbG;AAcHE,MAAAA,iBAAiB,EAAjBA,iBAdG;AAeHC,MAAAA,mBAAmB,EAAnBA,mBAfG;AAgBHM,MAAAA,qBAAqB,EAArBA,qBAhBG;AAiBHC,MAAAA,oBAAoB,EAApBA,oBAjBG;AAkBHC,MAAAA,eAAe,EAAfA,eAlBG;AAmBHE,MAAAA,4BAA4B,EAA5BA,4BAnBG;AAoBHD,MAAAA,eAAe,EAAfA;AApBG,KADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAwBKtC,KAAK,CAACyC,QAxBX,CADJ;AA4BH,CAnOD;;GAAM1C,c;;KAAAA,c;AAqON,eAAeA,cAAf","sourcesContent":["import React, { useReducer } from 'react';\r\n\r\nimport operacionContext from './operacionContext';\r\nimport operacionReducer from './operacionReducer';\r\nimport {\r\n    FORMULARIO_OPERACION,\r\n    OBTENER_OPERACIONES,\r\n    AGREGAR_OPERACION,\r\n    OPERACION_EXITOSA,\r\n    OPERACION_ERROR,\r\n    OCULTAR_ALERTA,\r\n    VALIDAR_FORMULARIO,\r\n    OPERACION_ACTUAL,\r\n    ELIMINAR_OPERACION,\r\n    LIMPIAR_STATE,\r\n    ACTUALIZAR_OPERACION,\r\n    LIMPIAR_OPERACION,\r\n    CALCULAR_BALANCE,\r\n    OPERACIONES_CATEGORIAS,\r\n    TOTAL_INGRESOS,\r\n    TOTAL_EGRESOS\r\n} from '../../types';\r\n\r\nimport clienteAxios from '../../config/axios';\r\n\r\nconst OperacionState = props => {\r\n\r\n    const initialState = {\r\n        operaciones : [],\r\n        nuevaOperacion : false,\r\n        errorformulario: false,\r\n        operacion: null,\r\n        mensaje: {},\r\n        balance: 0,\r\n        ingresos: 0,\r\n        egresos: 0\r\n    }\r\n\r\n    // dispatch para ejecutar las acciones\r\n    const [state, dispatch] = useReducer(operacionReducer, initialState);\r\n\r\n    // serie de funciones para el CRUD\r\n    const mostrarFormulario = () => {\r\n        dispatch({\r\n            type: FORMULARIO_OPERACION\r\n        })\r\n    }\r\n\r\n    // obtener los operaciones\r\n    const obtenerOperaciones = async () => {\r\n        try {\r\n            const resultado = await clienteAxios.get('/api/operaciones');\r\n            \r\n            dispatch({\r\n                type: OBTENER_OPERACIONES,\r\n                payload: resultado.data.operaciones\r\n            });\r\n        } catch (error) {\r\n            const alerta = {\r\n                msg: 'Hubo un error',\r\n                categoria: 'alerta-error'\r\n            }\r\n            dispatch({\r\n                type: OPERACION_ERROR,\r\n                payload: alerta\r\n            })\r\n        }\r\n    }\r\n    \r\n    // agregar nueva operacion\r\n    const agregarOperacion = async operacion => {\r\n\r\n        try {\r\n            const resultado = await clienteAxios.post('/api/operaciones', operacion);\r\n            \r\n            const alerta = {\r\n                msg: 'Operación agregada exitosamente',\r\n                categoria: 'alerta-ok'\r\n            }\r\n            \r\n            dispatch({\r\n                type: OPERACION_EXITOSA,\r\n                payload: alerta\r\n            })\r\n\r\n            // insertar el operacion en el state\r\n            dispatch({\r\n                type: AGREGAR_OPERACION,\r\n                payload: resultado.data\r\n            })\r\n        } catch (error) {\r\n            const alerta = {\r\n                msg: 'Hubo un error',\r\n                categoria: 'alerta-error'\r\n            }\r\n            dispatch({\r\n                type: OPERACION_ERROR,\r\n                payload: alerta\r\n            })\r\n        }\r\n\r\n        // Limpia la alerta después de 3 segundos\r\n        setTimeout(() => {\r\n            dispatch({\r\n                type: OCULTAR_ALERTA\r\n            })\r\n        }, 3000); \r\n    }\r\n\r\n    // validar el formulario por errores\r\n    const mostrarError = () => {\r\n        dispatch({\r\n            type: VALIDAR_FORMULARIO\r\n        })\r\n    }\r\n\r\n    // selecciona el operacion que el usuario dio click\r\n    const operacionActual = operacionId => {\r\n        dispatch({\r\n            type: OPERACION_ACTUAL,\r\n            payload: operacionId\r\n        })\r\n    }\r\n\r\n    // elimina un operacion\r\n    const eliminarOperacion = async operacionId => {\r\n        try {\r\n            \r\n            await clienteAxios.delete(`/api/operaciones/${operacionId}`);\r\n            \r\n            const alerta = {\r\n                msg: 'Operación eliminada exitosamente',\r\n                categoria: 'alerta-ok'\r\n            }\r\n            \r\n            dispatch({\r\n                type: OPERACION_EXITOSA,\r\n                payload: alerta\r\n            })\r\n\r\n            dispatch({\r\n                type: ELIMINAR_OPERACION,\r\n                payload: operacionId\r\n            })\r\n                        \r\n        } catch (error) {\r\n            const alerta = {\r\n                msg: 'Hubo un error',\r\n                categoria: 'alerta-error'\r\n            }\r\n            dispatch({\r\n                type: OPERACION_ERROR,\r\n                payload: alerta\r\n            })\r\n        }\r\n\r\n        // Limpia la alerta después de 3 segundos\r\n        setTimeout(() => {\r\n            dispatch({\r\n                type: OCULTAR_ALERTA\r\n            })\r\n        }, 3000); \r\n    }\r\n\r\n    // edita o modifica una operacion\r\n    const actualizarOperacion = async operacion => {\r\n        try {\r\n            const resultado = await clienteAxios.put(`/api/operaciones/${operacion._id}`, operacion);\r\n            dispatch({\r\n                type: ACTUALIZAR_OPERACION,\r\n                payload: resultado.data.operacion\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    // elimina la operacion seleccionada\r\n    const limpiarOperacion = () => {\r\n        dispatch({\r\n            type: LIMPIAR_OPERACION\r\n        })\r\n    }\r\n\r\n    const calcularTotalIngresos = async () => {\r\n        dispatch({\r\n            type: TOTAL_INGRESOS\r\n        })\r\n    }\r\n\r\n    const calcularTotalEgresos = async () => {\r\n        dispatch({\r\n            type: TOTAL_EGRESOS\r\n        })\r\n    }\r\n\r\n\r\n    // calcular el balance: total ingresos - total egresos\r\n    const calcularBalance = async () => {\r\n        dispatch({\r\n            type: CALCULAR_BALANCE\r\n        })\r\n    }\r\n\r\n    const calcularTotales = async () => {\r\n        await obtenerOperaciones();\r\n\r\n        calcularTotalIngresos();\r\n        calcularTotalEgresos();\r\n        calcularBalance();\r\n    }\r\n\r\n    const obtenerOperacionesCategorias = async categoria => {\r\n        \r\n        await obtenerOperaciones();\r\n\r\n        dispatch({\r\n            type: OPERACIONES_CATEGORIAS,\r\n            payload: categoria\r\n        })\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <operacionContext.Provider\r\n            value={{\r\n                operaciones: state.operaciones,\r\n                formulario: state.formulario,\r\n                errorformulario: state.errorformulario,\r\n                operacion: state.operacion,\r\n                mensaje: state.mensaje,\r\n                balance: state.balance,\r\n                ingresos: state.ingresos,\r\n                egresos: state.egresos,\r\n                mostrarFormulario,\r\n                obtenerOperaciones,\r\n                agregarOperacion,\r\n                mostrarError,\r\n                operacionActual,\r\n                eliminarOperacion,\r\n                actualizarOperacion,\r\n                calcularTotalIngresos,\r\n                calcularTotalEgresos,\r\n                calcularBalance,\r\n                obtenerOperacionesCategorias,\r\n                calcularTotales\r\n            }}\r\n        >\r\n            {props.children}\r\n        </operacionContext.Provider>\r\n    )\r\n}\r\n\r\nexport default OperacionState;"]},"metadata":{},"sourceType":"module"}