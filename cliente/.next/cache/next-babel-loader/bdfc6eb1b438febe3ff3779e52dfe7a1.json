{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Joan\\\\Desktop\\\\AlkemyReactChallenge\\\\cliente\\\\context\\\\operaciones\\\\operacionState.js\";\nvar __jsx = React.createElement;\nimport React, { useReducer } from 'react';\nimport operacionContext from './operacionContext';\nimport operacionReducer from './operacionReducer';\nimport { FORMULARIO_OPERACION, OBTENER_OPERACIONES, AGREGAR_OPERACION, OPERACION_EXITOSA, OPERACION_ERROR, OCULTAR_ALERTA, VALIDAR_FORMULARIO, OPERACION_ACTUAL, ELIMINAR_OPERACION, ACTUALIZAR_OPERACION, LIMPIAR_OPERACION, CALCULAR_BALANCE, OPERACIONES_CATEGORIAS, TOTAL_INGRESOS, TOTAL_EGRESOS } from '../../types';\nimport clienteAxios from '../../config/axios';\n\nconst OperacionState = props => {\n  const initialState = {\n    operaciones: [],\n    operacion: [{}],\n    mensaje: {},\n    balance: 0,\n    ingresos: 0,\n    egresos: 0\n  }; // dispatch para ejecutar las acciones\n\n  const {\n    0: state,\n    1: dispatch\n  } = useReducer(operacionReducer, initialState); // obtener los operaciones\n\n  const obtenerOperaciones = async () => {\n    try {\n      const resultado = await clienteAxios.get('/api/operaciones');\n      dispatch({\n        type: OBTENER_OPERACIONES,\n        payload: resultado.data.operaciones\n      });\n    } catch (error) {\n      const alerta = {\n        msg: 'Hubo un error',\n        categoria: 'alerta-error'\n      };\n      dispatch({\n        type: OPERACION_ERROR,\n        payload: alerta\n      });\n    }\n  }; // agregar nueva operacion\n\n\n  const agregarOperacion = async operacion => {\n    try {\n      const resultado = await clienteAxios.post('/api/operaciones', operacion);\n      const alerta = {\n        msg: 'Operación agregada exitosamente',\n        categoria: 'alerta-ok'\n      };\n      dispatch({\n        type: OPERACION_EXITOSA,\n        payload: alerta\n      }); // insertar el operacion en el state\n\n      dispatch({\n        type: AGREGAR_OPERACION,\n        payload: resultado.data\n      });\n    } catch (error) {\n      const alerta = {\n        msg: 'Hubo un error',\n        categoria: 'alerta-error'\n      };\n      dispatch({\n        type: OPERACION_ERROR,\n        payload: alerta\n      });\n    } // Limpia la alerta después de 3 segundos\n\n\n    setTimeout(() => {\n      dispatch({\n        type: OCULTAR_ALERTA\n      });\n    }, 3000);\n  }; // validar el formulario por errores\n\n\n  const mostrarError = () => {\n    dispatch({\n      type: VALIDAR_FORMULARIO\n    });\n  }; // selecciona el operacion que el usuario dio click\n\n\n  const operacionActual = operacionId => {\n    dispatch({\n      type: OPERACION_ACTUAL,\n      payload: operacionId\n    });\n  }; // elimina un operacion\n\n\n  const eliminarOperacion = async operacionId => {\n    try {\n      await clienteAxios.delete(`/api/operaciones/${operacionId}`);\n      const alerta = {\n        msg: 'Operación eliminada exitosamente',\n        categoria: 'alerta-ok'\n      };\n      dispatch({\n        type: OPERACION_EXITOSA,\n        payload: alerta\n      });\n      dispatch({\n        type: ELIMINAR_OPERACION,\n        payload: operacionId\n      });\n    } catch (error) {\n      const alerta = {\n        msg: 'Hubo un error',\n        categoria: 'alerta-error'\n      };\n      dispatch({\n        type: OPERACION_ERROR,\n        payload: alerta\n      });\n    } // Limpia la alerta después de 3 segundos\n\n\n    setTimeout(() => {\n      dispatch({\n        type: OCULTAR_ALERTA\n      });\n    }, 3000);\n  }; // edita o modifica una operacion\n\n\n  const actualizarOperacion = async operacion => {\n    try {\n      const resultado = await clienteAxios.put(`/api/operaciones/${operacion._id}`, operacion);\n      const alerta = {\n        msg: 'Operación editada exitosamente',\n        categoria: 'alerta-ok'\n      };\n      dispatch({\n        type: OPERACION_EXITOSA,\n        payload: alerta\n      });\n      dispatch({\n        type: ACTUALIZAR_OPERACION,\n        payload: resultado.data.operacion\n      });\n    } catch (error) {\n      const alerta = {\n        msg: 'Hubo un error',\n        categoria: 'alerta-error'\n      };\n      dispatch({\n        type: OPERACION_ERROR,\n        payload: alerta\n      });\n    } // Limpia la alerta después de 3 segundos\n\n\n    setTimeout(() => {\n      dispatch({\n        type: OCULTAR_ALERTA\n      });\n    }, 3000);\n  }; // elimina la operacion seleccionada\n\n\n  const limpiarOperacion = () => {\n    dispatch({\n      type: LIMPIAR_OPERACION\n    });\n  };\n\n  const calcularTotalIngresos = async () => {\n    dispatch({\n      type: TOTAL_INGRESOS\n    });\n  };\n\n  const calcularTotalEgresos = async () => {\n    dispatch({\n      type: TOTAL_EGRESOS\n    });\n  }; // calcular el balance: total ingresos - total egresos\n\n\n  const calcularBalance = async () => {\n    dispatch({\n      type: CALCULAR_BALANCE\n    });\n  };\n\n  const calcularTotales = async () => {\n    await obtenerOperaciones();\n    calcularTotalIngresos();\n    calcularTotalEgresos();\n    calcularBalance();\n  };\n\n  const obtenerOperacionesCategorias = async categoria => {\n    await obtenerOperaciones();\n    dispatch({\n      type: OPERACIONES_CATEGORIAS,\n      payload: categoria\n    });\n  };\n\n  return __jsx(operacionContext.Provider, {\n    value: {\n      operaciones: state.operaciones,\n      formulario: state.formulario,\n      errorformulario: state.errorformulario,\n      operacion: state.operacion,\n      mensaje: state.mensaje,\n      balance: state.balance,\n      ingresos: state.ingresos,\n      egresos: state.egresos,\n      mostrarFormulario,\n      obtenerOperaciones,\n      agregarOperacion,\n      mostrarError,\n      operacionActual,\n      eliminarOperacion,\n      actualizarOperacion,\n      calcularTotalIngresos,\n      calcularTotalEgresos,\n      calcularBalance,\n      obtenerOperacionesCategorias,\n      calcularTotales\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 9\n    }\n  }, props.children);\n};\n\nexport default OperacionState;","map":{"version":3,"sources":["C:/Users/Joan/Desktop/AlkemyReactChallenge/cliente/context/operaciones/operacionState.js"],"names":["React","useReducer","operacionContext","operacionReducer","FORMULARIO_OPERACION","OBTENER_OPERACIONES","AGREGAR_OPERACION","OPERACION_EXITOSA","OPERACION_ERROR","OCULTAR_ALERTA","VALIDAR_FORMULARIO","OPERACION_ACTUAL","ELIMINAR_OPERACION","ACTUALIZAR_OPERACION","LIMPIAR_OPERACION","CALCULAR_BALANCE","OPERACIONES_CATEGORIAS","TOTAL_INGRESOS","TOTAL_EGRESOS","clienteAxios","OperacionState","props","initialState","operaciones","operacion","mensaje","balance","ingresos","egresos","state","dispatch","obtenerOperaciones","resultado","get","type","payload","data","error","alerta","msg","categoria","agregarOperacion","post","setTimeout","mostrarError","operacionActual","operacionId","eliminarOperacion","delete","actualizarOperacion","put","_id","limpiarOperacion","calcularTotalIngresos","calcularTotalEgresos","calcularBalance","calcularTotales","obtenerOperacionesCategorias","formulario","errorformulario","mostrarFormulario","children"],"mappings":"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","sourcesContent":["import React, { useReducer } from 'react';\r\n\r\nimport operacionContext from './operacionContext';\r\nimport operacionReducer from './operacionReducer';\r\nimport {\r\n    FORMULARIO_OPERACION,\r\n    OBTENER_OPERACIONES,\r\n    AGREGAR_OPERACION,\r\n    OPERACION_EXITOSA,\r\n    OPERACION_ERROR,\r\n    OCULTAR_ALERTA,\r\n    VALIDAR_FORMULARIO,\r\n    OPERACION_ACTUAL,\r\n    ELIMINAR_OPERACION,\r\n    ACTUALIZAR_OPERACION,\r\n    LIMPIAR_OPERACION,\r\n    CALCULAR_BALANCE,\r\n    OPERACIONES_CATEGORIAS,\r\n    TOTAL_INGRESOS,\r\n    TOTAL_EGRESOS\r\n} from '../../types';\r\n\r\nimport clienteAxios from '../../config/axios';\r\n\r\nconst OperacionState = props => {\r\n\r\n    const initialState = {\r\n        operaciones : [],\r\n        operacion: [{}],\r\n        mensaje: {},\r\n        balance: 0,\r\n        ingresos: 0,\r\n        egresos: 0\r\n    }\r\n\r\n    // dispatch para ejecutar las acciones\r\n    const [state, dispatch] = useReducer(operacionReducer, initialState);\r\n\r\n    // obtener los operaciones\r\n    const obtenerOperaciones = async () => {\r\n        try {\r\n            const resultado = await clienteAxios.get('/api/operaciones');\r\n            \r\n            dispatch({\r\n                type: OBTENER_OPERACIONES,\r\n                payload: resultado.data.operaciones\r\n            });\r\n        } catch (error) {\r\n            const alerta = {\r\n                msg: 'Hubo un error',\r\n                categoria: 'alerta-error'\r\n            }\r\n            dispatch({\r\n                type: OPERACION_ERROR,\r\n                payload: alerta\r\n            })\r\n        }\r\n    }\r\n    \r\n    // agregar nueva operacion\r\n    const agregarOperacion = async operacion => {\r\n\r\n        try {\r\n            const resultado = await clienteAxios.post('/api/operaciones', operacion);\r\n            \r\n            const alerta = {\r\n                msg: 'Operación agregada exitosamente',\r\n                categoria: 'alerta-ok'\r\n            }\r\n            \r\n            dispatch({\r\n                type: OPERACION_EXITOSA,\r\n                payload: alerta\r\n            })\r\n\r\n            // insertar el operacion en el state\r\n            dispatch({\r\n                type: AGREGAR_OPERACION,\r\n                payload: resultado.data\r\n            })\r\n        } catch (error) {\r\n            const alerta = {\r\n                msg: 'Hubo un error',\r\n                categoria: 'alerta-error'\r\n            }\r\n            dispatch({\r\n                type: OPERACION_ERROR,\r\n                payload: alerta\r\n            })\r\n        }\r\n\r\n        // Limpia la alerta después de 3 segundos\r\n        setTimeout(() => {\r\n            dispatch({\r\n                type: OCULTAR_ALERTA\r\n            })\r\n        }, 3000); \r\n    }\r\n\r\n    // validar el formulario por errores\r\n    const mostrarError = () => {\r\n        dispatch({\r\n            type: VALIDAR_FORMULARIO\r\n        })\r\n    }\r\n\r\n    // selecciona el operacion que el usuario dio click\r\n    const operacionActual = operacionId => {\r\n        dispatch({\r\n            type: OPERACION_ACTUAL,\r\n            payload: operacionId\r\n        })\r\n    }\r\n\r\n    // elimina un operacion\r\n    const eliminarOperacion = async operacionId => {\r\n        try {\r\n            \r\n            await clienteAxios.delete(`/api/operaciones/${operacionId}`);\r\n            \r\n            const alerta = {\r\n                msg: 'Operación eliminada exitosamente',\r\n                categoria: 'alerta-ok'\r\n            }\r\n            \r\n            dispatch({\r\n                type: OPERACION_EXITOSA,\r\n                payload: alerta\r\n            })\r\n\r\n            dispatch({\r\n                type: ELIMINAR_OPERACION,\r\n                payload: operacionId\r\n            })\r\n                        \r\n        } catch (error) {\r\n            const alerta = {\r\n                msg: 'Hubo un error',\r\n                categoria: 'alerta-error'\r\n            }\r\n            dispatch({\r\n                type: OPERACION_ERROR,\r\n                payload: alerta\r\n            })\r\n        }\r\n\r\n        // Limpia la alerta después de 3 segundos\r\n        setTimeout(() => {\r\n            dispatch({\r\n                type: OCULTAR_ALERTA\r\n            })\r\n        }, 3000); \r\n    }\r\n\r\n    // edita o modifica una operacion\r\n    const actualizarOperacion = async operacion => {\r\n        try {\r\n            const resultado = await clienteAxios.put(`/api/operaciones/${operacion._id}`, operacion);\r\n            \r\n            const alerta = {\r\n                msg: 'Operación editada exitosamente',\r\n                categoria: 'alerta-ok'\r\n            }\r\n            \r\n            dispatch({\r\n                type: OPERACION_EXITOSA,\r\n                payload: alerta\r\n            })\r\n            \r\n            dispatch({\r\n                type: ACTUALIZAR_OPERACION,\r\n                payload: resultado.data.operacion\r\n            })\r\n        } catch (error) {\r\n            const alerta = {\r\n                msg: 'Hubo un error',\r\n                categoria: 'alerta-error'\r\n            }\r\n            dispatch({\r\n                type: OPERACION_ERROR,\r\n                payload: alerta\r\n            })\r\n        }\r\n\r\n        // Limpia la alerta después de 3 segundos\r\n        setTimeout(() => {\r\n            dispatch({\r\n                type: OCULTAR_ALERTA\r\n            })\r\n        }, 3000); \r\n    }\r\n\r\n    // elimina la operacion seleccionada\r\n    const limpiarOperacion = () => {\r\n        dispatch({\r\n            type: LIMPIAR_OPERACION\r\n        })\r\n    }\r\n\r\n    const calcularTotalIngresos = async () => {\r\n        dispatch({\r\n            type: TOTAL_INGRESOS\r\n        })\r\n    }\r\n\r\n    const calcularTotalEgresos = async () => {\r\n        dispatch({\r\n            type: TOTAL_EGRESOS\r\n        })\r\n    }\r\n\r\n\r\n    // calcular el balance: total ingresos - total egresos\r\n    const calcularBalance = async () => {\r\n        dispatch({\r\n            type: CALCULAR_BALANCE\r\n        })\r\n    }\r\n\r\n    const calcularTotales = async () => {\r\n        await obtenerOperaciones();\r\n\r\n        calcularTotalIngresos();\r\n        calcularTotalEgresos();\r\n        calcularBalance();\r\n    }\r\n\r\n    const obtenerOperacionesCategorias = async categoria => {\r\n        \r\n        await obtenerOperaciones();\r\n\r\n        dispatch({\r\n            type: OPERACIONES_CATEGORIAS,\r\n            payload: categoria\r\n        })\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <operacionContext.Provider\r\n            value={{\r\n                operaciones: state.operaciones,\r\n                formulario: state.formulario,\r\n                errorformulario: state.errorformulario,\r\n                operacion: state.operacion,\r\n                mensaje: state.mensaje,\r\n                balance: state.balance,\r\n                ingresos: state.ingresos,\r\n                egresos: state.egresos,\r\n                mostrarFormulario,\r\n                obtenerOperaciones,\r\n                agregarOperacion,\r\n                mostrarError,\r\n                operacionActual,\r\n                eliminarOperacion,\r\n                actualizarOperacion,\r\n                calcularTotalIngresos,\r\n                calcularTotalEgresos,\r\n                calcularBalance,\r\n                obtenerOperacionesCategorias,\r\n                calcularTotales\r\n            }}\r\n        >\r\n            {props.children}\r\n        </operacionContext.Provider>\r\n    )\r\n}\r\n\r\nexport default OperacionState;"]},"metadata":{},"sourceType":"module"}