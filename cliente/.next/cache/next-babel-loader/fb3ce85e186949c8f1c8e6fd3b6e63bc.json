{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Joan\\\\Desktop\\\\AlkemyReactChallenge\\\\cliente\\\\context\\\\auth\\\\authState.js\";\nvar __jsx = React.createElement;\nimport React, { useReducer } from 'react';\nimport authContext from './authContext';\nimport authReducer from './authReducer';\nimport { REGISTRO_EXITOSO, REGISTRO_ERROR, OCULTAR_ALERTA, LOGIN_EXITOSO, LOGIN_ERROR, USUARIO_AUTENTICADO, CERRAR_SESION } from '../../types';\nimport clienteAxios from '../../config/axios';\nimport tokenAuth from '../../config/tokenAuth';\n\nconst AuthState = ({\n  children\n}) => {\n  // Definir un state inicial\n  const initialState = {\n    token: false ? localStorage.getItem('token') : '',\n    autenticado: null,\n    usuario: null,\n    mensaje: null,\n    cargando: null\n  }; // Definir el reducer\n\n  const {\n    0: state,\n    1: dispatch\n  } = useReducer(authReducer, initialState); // Registrar nuevos usuarios\n\n  const registrarUsuario = async datos => {\n    try {\n      const respuesta = await clienteAxios.post('/api/usuarios', datos);\n      const alerta = {\n        msg: error.response.data.msg,\n        categoria: 'alerta-ok'\n      };\n      dispatch({\n        type: REGISTRO_EXITOSO,\n        payload: respuesta.data.msg,\n        alerta\n      }); // obtener el usuario\n\n      usuarioAutenticado();\n    } catch (error) {\n      // console.log(error.response.data.msg);\n      const alerta = {\n        msg: error.response.data.msg,\n        categoria: 'alerta-error'\n      };\n      dispatch({\n        type: REGISTRO_ERROR,\n        payload: alerta\n      });\n    }\n    /*\n            // Limpia la alerta después de 3 segundos\n            setTimeout(() => {\n                dispatch({\n                    type: OCULTAR_ALERTA\n                })\n            }, 3000); */\n\n  }; // Autenticar Usuarios\n\n\n  const iniciarSesion = async datos => {\n    try {\n      const respuesta = await clienteAxios.post('/api/auth', datos);\n      dispatch({\n        type: LOGIN_EXITOSO,\n        payload: respuesta.data.token\n      });\n    } catch (error) {\n      // console.log(error.response.data.msg);\n      const alerta = {\n        msg: error.response.data.msg,\n        categoria: 'alerta-error'\n      };\n      dispatch({\n        type: LOGIN_ERROR,\n        payload: alerta\n      });\n    } // Limpia la alerta después de 3 segundos\n\n\n    setTimeout(() => {\n      dispatch({\n        type: OCULTAR_ALERTA\n      });\n    }, 3000);\n  }; // Retorne el Usuario autenticado en base al JWT\n\n\n  const usuarioAutenticado = async () => {\n    const token = localStorage.getItem('token');\n\n    if (token) {\n      tokenAuth(token);\n    }\n\n    try {\n      const respuesta = await clienteAxios.get('/api/auth');\n\n      if (respuesta.data.usuario) {\n        dispatch({\n          type: USUARIO_AUTENTICADO,\n          payload: respuesta.data.usuario\n        });\n      }\n    } catch (error) {\n      console.log(error);\n      dispatch({\n        type: LOGIN_ERROR,\n        payload: error.response.data.msg\n      });\n    }\n  }; // Cerrar la sesión\n\n\n  const cerrarSesion = () => {\n    dispatch({\n      type: CERRAR_SESION\n    });\n  };\n\n  return __jsx(authContext.Provider, {\n    value: {\n      token: state.token,\n      autenticado: state.autenticado,\n      usuario: state.usuario,\n      mensaje: state.mensaje,\n      cargando: state.cargando,\n      registrarUsuario,\n      iniciarSesion,\n      usuarioAutenticado,\n      cerrarSesion\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 9\n    }\n  }, children);\n};\n\nexport default AuthState;","map":{"version":3,"sources":["C:/Users/Joan/Desktop/AlkemyReactChallenge/cliente/context/auth/authState.js"],"names":["React","useReducer","authContext","authReducer","REGISTRO_EXITOSO","REGISTRO_ERROR","OCULTAR_ALERTA","LOGIN_EXITOSO","LOGIN_ERROR","USUARIO_AUTENTICADO","CERRAR_SESION","clienteAxios","tokenAuth","AuthState","children","initialState","token","localStorage","getItem","autenticado","usuario","mensaje","cargando","state","dispatch","registrarUsuario","datos","respuesta","post","alerta","msg","error","response","data","categoria","type","payload","usuarioAutenticado","iniciarSesion","setTimeout","get","console","log","cerrarSesion"],"mappings":"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","sourcesContent":["import React, { useReducer } from 'react';\nimport authContext from './authContext';\nimport authReducer from './authReducer';\n\n\nimport { \n    REGISTRO_EXITOSO, \n    REGISTRO_ERROR,\n    OCULTAR_ALERTA,\n    LOGIN_EXITOSO,\n    LOGIN_ERROR,\n    USUARIO_AUTENTICADO,\n    CERRAR_SESION\n} from '../../types';\n\nimport clienteAxios from '../../config/axios';\nimport tokenAuth from '../../config/tokenAuth';\n\nconst AuthState = ({children}) => {\n\n    // Definir un state inicial\n    const initialState = {\n        token: typeof window !== 'undefined' ? localStorage.getItem('token') : '',\n        autenticado: null,\n        usuario: null,\n        mensaje: null,\n        cargando: null\n    }\n\n    // Definir el reducer\n    const [ state, dispatch ] = useReducer(authReducer, initialState);\n\n    // Registrar nuevos usuarios\n    const registrarUsuario = async datos => {\n        \n        try {\n            const respuesta = await clienteAxios.post('/api/usuarios', datos);\n            \n            const alerta = {\n                msg: error.response.data.msg,\n                categoria: 'alerta-ok'\n            };\n\n            dispatch({\n                type: REGISTRO_EXITOSO,\n                payload: respuesta.data.msg, alerta\n            });\n\n            // obtener el usuario\n            usuarioAutenticado();\n        } catch (error) {\n            // console.log(error.response.data.msg);\n            const alerta = {\n                msg: error.response.data.msg,\n                categoria: 'alerta-error'\n            };\n\n            dispatch({\n                type: REGISTRO_ERROR,\n                payload: alerta\n            })\n        }\n/*\n        // Limpia la alerta después de 3 segundos\n        setTimeout(() => {\n            dispatch({\n                type: OCULTAR_ALERTA\n            })\n        }, 3000); */\n    }\n\n    // Autenticar Usuarios\n    const iniciarSesion = async datos => {\n\n        try {\n            const respuesta = await clienteAxios.post('/api/auth', datos);\n            dispatch({\n                type: LOGIN_EXITOSO,\n                payload: respuesta.data.token\n            })\n        } catch (error) {\n            // console.log(error.response.data.msg);\n            const alerta = {\n                msg: error.response.data.msg,\n                categoria: 'alerta-error'\n            };\n\n            dispatch({\n                type: LOGIN_ERROR,\n                payload: alerta\n            })\n        }\n\n        // Limpia la alerta después de 3 segundos\n        setTimeout(() => {\n            dispatch({\n                type: OCULTAR_ALERTA\n            })\n        }, 3000);\n            \n            \n            \n    }\n\n    // Retorne el Usuario autenticado en base al JWT\n    const usuarioAutenticado = async () => {\n        const token = localStorage.getItem('token');\n        if(token) {\n            tokenAuth(token)\n        }\n\n        try {\n            const respuesta = await clienteAxios.get('/api/auth');\n            if(respuesta.data.usuario) {\n                dispatch({\n                    type: USUARIO_AUTENTICADO,\n                    payload: respuesta.data.usuario\n                }) \n            }\n\n        } catch (error) {\n            console.log(error);\n            dispatch({\n                type: LOGIN_ERROR,\n                payload: error.response.data.msg\n            })\n        }\n    }\n\n    // Cerrar la sesión\n    const cerrarSesion = () => {\n        dispatch({\n            type: CERRAR_SESION\n        })\n    }\n\n    return (\n        <authContext.Provider\n            value={{ \n                token: state.token,\n                autenticado: state.autenticado,\n                usuario: state.usuario,\n                mensaje: state.mensaje,\n                cargando: state.cargando,\n                registrarUsuario,\n                iniciarSesion,\n                usuarioAutenticado, \n                cerrarSesion\n            }}\n        >\n            {children}\n        </authContext.Provider>\n    )\n}\n\nexport default AuthState;"]},"metadata":{},"sourceType":"module"}