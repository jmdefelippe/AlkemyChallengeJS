{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\Joan\\\\Desktop\\\\AlkemyReactChallenge\\\\cliente\\\\context\\\\operaciones\\\\operacionState.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useReducer } from 'react';\nimport operacionContext from './operacionContext';\nimport operacionReducer from './operacionReducer';\nimport { FORMULARIO_OPERACION, OBTENER_OPERACIONES, AGREGAR_OPERACION, OPERACION_ERROR, VALIDAR_FORMULARIO, OPERACION_ACTUAL, ELIMINAR_OPERACION, LIMPIAR_STATE, ACTUALIZAR_OPERACION, LIMPIAR_OPERACION } from '../../types';\nimport clienteAxios from '../../config/axios';\n\nvar OperacionState = function OperacionState(props) {\n  _s();\n\n  var initialState = {\n    operaciones: [],\n    nuevaOperacion: false,\n    errorformulario: false,\n    operacion: null,\n    mensaje: null,\n    balance: 0\n  }; // dispatch para ejecutar las acciones\n\n  var _useReducer = useReducer(operacionReducer, initialState),\n      state = _useReducer[0],\n      dispatch = _useReducer[1]; // serie de funciones para el CRUD\n\n\n  var mostrarFormulario = function mostrarFormulario() {\n    dispatch({\n      type: FORMULARIO_OPERACION\n    });\n  }; // obtener los operaciones\n\n\n  var obtenerOperaciones = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var resultado, alerta;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return clienteAxios.get('/api/operaciones');\n\n            case 3:\n              resultado = _context.sent;\n              dispatch({\n                type: OBTENER_OPERACIONES,\n                payload: resultado.data.operaciones\n              });\n              _context.next = 11;\n              break;\n\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context[\"catch\"](0);\n              alerta = {\n                msg: 'Hubo un error',\n                categoria: 'alerta-error'\n              };\n              dispatch({\n                type: OPERACION_ERROR,\n                payload: alerta\n              });\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 7]]);\n    }));\n\n    return function obtenerOperaciones() {\n      return _ref.apply(this, arguments);\n    };\n  }(); // agregar nueva operacion\n\n\n  var agregarOperacion = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(operacion) {\n      var resultado, alerta;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              _context2.next = 3;\n              return clienteAxios.post('/api/operaciones', operacion);\n\n            case 3:\n              resultado = _context2.sent;\n              console.log(resultado); // insertar el operacion en el state\n\n              dispatch({\n                type: AGREGAR_OPERACION,\n                payload: resultado.data\n              });\n              _context2.next = 12;\n              break;\n\n            case 8:\n              _context2.prev = 8;\n              _context2.t0 = _context2[\"catch\"](0);\n              alerta = {\n                msg: 'Hubo un error',\n                categoria: 'alerta-error'\n              };\n              dispatch({\n                type: OPERACION_ERROR,\n                payload: alerta\n              });\n\n            case 12:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[0, 8]]);\n    }));\n\n    return function agregarOperacion(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }(); // validar el formulario por errores\n\n\n  var mostrarError = function mostrarError() {\n    dispatch({\n      type: VALIDAR_FORMULARIO\n    });\n  }; // selecciona el operacion que el usuario dio click\n\n\n  var operacionActual = function operacionActual(operacionId) {\n    dispatch({\n      type: OPERACION_ACTUAL,\n      payload: operacionId\n    });\n  }; // elimina un operacion\n\n\n  var eliminarOperacion = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(operacionId) {\n      var alerta;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.prev = 0;\n              _context3.next = 3;\n              return clienteAxios[\"delete\"](\"/api/operaciones/\".concat(operacionId));\n\n            case 3:\n              dispatch({\n                type: ELIMINAR_OPERACION,\n                payload: operacionId\n              });\n              _context3.next = 10;\n              break;\n\n            case 6:\n              _context3.prev = 6;\n              _context3.t0 = _context3[\"catch\"](0);\n              alerta = {\n                msg: 'Hubo un error',\n                categoria: 'alerta-error'\n              };\n              dispatch({\n                type: OPERACION_ERROR,\n                payload: alerta\n              });\n\n            case 10:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, null, [[0, 6]]);\n    }));\n\n    return function eliminarOperacion(_x2) {\n      return _ref3.apply(this, arguments);\n    };\n  }(); // edita o modifica una operacion\n\n\n  var actualizarOperacion = /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(operacion) {\n      var resultado;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.prev = 0;\n              _context4.next = 3;\n              return clienteAxios.put(\"/api/operaciones/\".concat(operacion._id), operacion);\n\n            case 3:\n              resultado = _context4.sent;\n              dispatch({\n                type: ACTUALIZAR_OPERACION,\n                payload: resultado.data.operacion\n              });\n              _context4.next = 10;\n              break;\n\n            case 7:\n              _context4.prev = 7;\n              _context4.t0 = _context4[\"catch\"](0);\n              console.log(_context4.t0);\n\n            case 10:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, null, [[0, 7]]);\n    }));\n\n    return function actualizarOperacion(_x3) {\n      return _ref4.apply(this, arguments);\n    };\n  }(); // elimina la operacion seleccionada\n\n\n  var limpiarOperacion = function limpiarOperacion() {\n    dispatch({\n      type: LIMPIAR_OPERACION\n    });\n  }; // calcular el balance: total ingresos - total egresos\n\n\n  var calcularBalance = function calcularBalance() {\n    dispatch({\n      type: CALCULAR_BALANCE\n    });\n  };\n\n  return __jsx(operacionContext.Provider, {\n    value: {\n      operaciones: state.operaciones,\n      formulario: state.formulario,\n      errorformulario: state.errorformulario,\n      operacion: state.operacion,\n      mensaje: state.mensaje,\n      balance: state.balance,\n      mostrarFormulario: mostrarFormulario,\n      obtenerOperaciones: obtenerOperaciones,\n      agregarOperacion: agregarOperacion,\n      mostrarError: mostrarError,\n      operacionActual: operacionActual,\n      eliminarOperacion: eliminarOperacion,\n      actualizarOperacion: actualizarOperacion,\n      calcularBalance: calcularBalance\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 9\n    }\n  }, props.children);\n};\n\n_s(OperacionState, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n\n_c = OperacionState;\nexport default OperacionState;\n\nvar _c;\n\n$RefreshReg$(_c, \"OperacionState\");","map":{"version":3,"sources":["C:/Users/Joan/Desktop/AlkemyReactChallenge/cliente/context/operaciones/operacionState.js"],"names":["React","useReducer","operacionContext","operacionReducer","FORMULARIO_OPERACION","OBTENER_OPERACIONES","AGREGAR_OPERACION","OPERACION_ERROR","VALIDAR_FORMULARIO","OPERACION_ACTUAL","ELIMINAR_OPERACION","LIMPIAR_STATE","ACTUALIZAR_OPERACION","LIMPIAR_OPERACION","clienteAxios","OperacionState","props","initialState","operaciones","nuevaOperacion","errorformulario","operacion","mensaje","balance","state","dispatch","mostrarFormulario","type","obtenerOperaciones","get","resultado","payload","data","alerta","msg","categoria","agregarOperacion","post","console","log","mostrarError","operacionActual","operacionId","eliminarOperacion","actualizarOperacion","put","_id","limpiarOperacion","calcularBalance","CALCULAR_BALANCE","formulario","children"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AAEA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,SACIC,oBADJ,EAEIC,mBAFJ,EAGIC,iBAHJ,EAIIC,eAJJ,EAKIC,kBALJ,EAMIC,gBANJ,EAOIC,kBAPJ,EAQIC,aARJ,EASIC,oBATJ,EAUIC,iBAVJ,QAWO,aAXP;AAaA,OAAOC,YAAP,MAAyB,oBAAzB;;AAEA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAAAC,KAAK,EAAI;AAAA;;AAE5B,MAAMC,YAAY,GAAG;AACjBC,IAAAA,WAAW,EAAG,EADG;AAEjBC,IAAAA,cAAc,EAAG,KAFA;AAGjBC,IAAAA,eAAe,EAAE,KAHA;AAIjBC,IAAAA,SAAS,EAAE,IAJM;AAKjBC,IAAAA,OAAO,EAAE,IALQ;AAMjBC,IAAAA,OAAO,EAAE;AANQ,GAArB,CAF4B,CAW5B;;AAX4B,oBAYFtB,UAAU,CAACE,gBAAD,EAAmBc,YAAnB,CAZR;AAAA,MAYrBO,KAZqB;AAAA,MAYdC,QAZc,mBAc5B;;;AACA,MAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,GAAM;AAC5BD,IAAAA,QAAQ,CAAC;AACLE,MAAAA,IAAI,EAAEvB;AADD,KAAD,CAAR;AAGH,GAJD,CAf4B,CAqB5B;;;AACA,MAAMwB,kBAAkB;AAAA,wEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAEKd,YAAY,CAACe,GAAb,CAAiB,kBAAjB,CAFL;;AAAA;AAEbC,cAAAA,SAFa;AAInBL,cAAAA,QAAQ,CAAC;AACLE,gBAAAA,IAAI,EAAEtB,mBADD;AAEL0B,gBAAAA,OAAO,EAAED,SAAS,CAACE,IAAV,CAAed;AAFnB,eAAD,CAAR;AAJmB;AAAA;;AAAA;AAAA;AAAA;AASbe,cAAAA,MATa,GASJ;AACXC,gBAAAA,GAAG,EAAE,eADM;AAEXC,gBAAAA,SAAS,EAAE;AAFA,eATI;AAanBV,cAAAA,QAAQ,CAAC;AACLE,gBAAAA,IAAI,EAAEpB,eADD;AAELwB,gBAAAA,OAAO,EAAEE;AAFJ,eAAD,CAAR;;AAbmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAlBL,kBAAkB;AAAA;AAAA;AAAA,KAAxB,CAtB4B,CA0C5B;;;AACA,MAAMQ,gBAAgB;AAAA,yEAAG,kBAAMf,SAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAGOP,YAAY,CAACuB,IAAb,CAAkB,kBAAlB,EAAsChB,SAAtC,CAHP;;AAAA;AAGXS,cAAAA,SAHW;AAIjBQ,cAAAA,OAAO,CAACC,GAAR,CAAYT,SAAZ,EAJiB,CAKjB;;AACAL,cAAAA,QAAQ,CAAC;AACLE,gBAAAA,IAAI,EAAErB,iBADD;AAELyB,gBAAAA,OAAO,EAAED,SAAS,CAACE;AAFd,eAAD,CAAR;AANiB;AAAA;;AAAA;AAAA;AAAA;AAWXC,cAAAA,MAXW,GAWF;AACXC,gBAAAA,GAAG,EAAE,eADM;AAEXC,gBAAAA,SAAS,EAAE;AAFA,eAXE;AAejBV,cAAAA,QAAQ,CAAC;AACLE,gBAAAA,IAAI,EAAEpB,eADD;AAELwB,gBAAAA,OAAO,EAAEE;AAFJ,eAAD,CAAR;;AAfiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAhBG,gBAAgB;AAAA;AAAA;AAAA,KAAtB,CA3C4B,CAkE5B;;;AACA,MAAMI,YAAY,GAAG,SAAfA,YAAe,GAAM;AACvBf,IAAAA,QAAQ,CAAC;AACLE,MAAAA,IAAI,EAAEnB;AADD,KAAD,CAAR;AAGH,GAJD,CAnE4B,CAyE5B;;;AACA,MAAMiC,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,WAAW,EAAI;AACnCjB,IAAAA,QAAQ,CAAC;AACLE,MAAAA,IAAI,EAAElB,gBADD;AAELsB,MAAAA,OAAO,EAAEW;AAFJ,KAAD,CAAR;AAIH,GALD,CA1E4B,CAiF5B;;;AACA,MAAMC,iBAAiB;AAAA,yEAAG,kBAAMD,WAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAEZ5B,YAAY,UAAZ,4BAAwC4B,WAAxC,EAFY;;AAAA;AAGlBjB,cAAAA,QAAQ,CAAC;AACLE,gBAAAA,IAAI,EAAEjB,kBADD;AAELqB,gBAAAA,OAAO,EAAEW;AAFJ,eAAD,CAAR;AAHkB;AAAA;;AAAA;AAAA;AAAA;AAQZT,cAAAA,MARY,GAQH;AACXC,gBAAAA,GAAG,EAAE,eADM;AAEXC,gBAAAA,SAAS,EAAE;AAFA,eARG;AAYlBV,cAAAA,QAAQ,CAAC;AACLE,gBAAAA,IAAI,EAAEpB,eADD;AAELwB,gBAAAA,OAAO,EAAEE;AAFJ,eAAD,CAAR;;AAZkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAjBU,iBAAiB;AAAA;AAAA;AAAA,KAAvB,CAlF4B,CAqG5B;;;AACA,MAAMC,mBAAmB;AAAA,yEAAG,kBAAMvB,SAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAEIP,YAAY,CAAC+B,GAAb,4BAAqCxB,SAAS,CAACyB,GAA/C,GAAsDzB,SAAtD,CAFJ;;AAAA;AAEdS,cAAAA,SAFc;AAGpBL,cAAAA,QAAQ,CAAC;AACLE,gBAAAA,IAAI,EAAEf,oBADD;AAELmB,gBAAAA,OAAO,EAAED,SAAS,CAACE,IAAV,CAAeX;AAFnB,eAAD,CAAR;AAHoB;AAAA;;AAAA;AAAA;AAAA;AAQpBiB,cAAAA,OAAO,CAACC,GAAR;;AARoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAnBK,mBAAmB;AAAA;AAAA;AAAA,KAAzB,CAtG4B,CAkH5B;;;AACA,MAAMG,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAM;AAC3BtB,IAAAA,QAAQ,CAAC;AACLE,MAAAA,IAAI,EAAEd;AADD,KAAD,CAAR;AAGH,GAJD,CAnH4B,CAyH5B;;;AACA,MAAMmC,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AAC1BvB,IAAAA,QAAQ,CAAC;AACLE,MAAAA,IAAI,EAAEsB;AADD,KAAD,CAAR;AAGH,GAJD;;AAMA,SACI,MAAC,gBAAD,CAAkB,QAAlB;AACI,IAAA,KAAK,EAAE;AACH/B,MAAAA,WAAW,EAAEM,KAAK,CAACN,WADhB;AAEHgC,MAAAA,UAAU,EAAE1B,KAAK,CAAC0B,UAFf;AAGH9B,MAAAA,eAAe,EAAEI,KAAK,CAACJ,eAHpB;AAIHC,MAAAA,SAAS,EAAEG,KAAK,CAACH,SAJd;AAKHC,MAAAA,OAAO,EAAEE,KAAK,CAACF,OALZ;AAMHC,MAAAA,OAAO,EAAEC,KAAK,CAACD,OANZ;AAOHG,MAAAA,iBAAiB,EAAjBA,iBAPG;AAQHE,MAAAA,kBAAkB,EAAlBA,kBARG;AASHQ,MAAAA,gBAAgB,EAAhBA,gBATG;AAUHI,MAAAA,YAAY,EAAZA,YAVG;AAWHC,MAAAA,eAAe,EAAfA,eAXG;AAYHE,MAAAA,iBAAiB,EAAjBA,iBAZG;AAaHC,MAAAA,mBAAmB,EAAnBA,mBAbG;AAcHI,MAAAA,eAAe,EAAfA;AAdG,KADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAkBKhC,KAAK,CAACmC,QAlBX,CADJ;AAsBH,CAtJD;;GAAMpC,c;;KAAAA,c;AAwJN,eAAeA,cAAf","sourcesContent":["import React, { useReducer } from 'react';\r\n\r\nimport operacionContext from './operacionContext';\r\nimport operacionReducer from './operacionReducer';\r\nimport {\r\n    FORMULARIO_OPERACION,\r\n    OBTENER_OPERACIONES,\r\n    AGREGAR_OPERACION,\r\n    OPERACION_ERROR,\r\n    VALIDAR_FORMULARIO,\r\n    OPERACION_ACTUAL,\r\n    ELIMINAR_OPERACION,\r\n    LIMPIAR_STATE,\r\n    ACTUALIZAR_OPERACION,\r\n    LIMPIAR_OPERACION\r\n} from '../../types';\r\n\r\nimport clienteAxios from '../../config/axios';\r\n\r\nconst OperacionState = props => {\r\n\r\n    const initialState = {\r\n        operaciones : [],\r\n        nuevaOperacion : false,\r\n        errorformulario: false,\r\n        operacion: null,\r\n        mensaje: null,\r\n        balance: 0\r\n    }\r\n\r\n    // dispatch para ejecutar las acciones\r\n    const [state, dispatch] = useReducer(operacionReducer, initialState);\r\n\r\n    // serie de funciones para el CRUD\r\n    const mostrarFormulario = () => {\r\n        dispatch({\r\n            type: FORMULARIO_OPERACION\r\n        })\r\n    }\r\n\r\n    // obtener los operaciones\r\n    const obtenerOperaciones = async () => {\r\n        try {\r\n            const resultado = await clienteAxios.get('/api/operaciones');\r\n            \r\n            dispatch({\r\n                type: OBTENER_OPERACIONES,\r\n                payload: resultado.data.operaciones\r\n            })\r\n        } catch (error) {\r\n            const alerta = {\r\n                msg: 'Hubo un error',\r\n                categoria: 'alerta-error'\r\n            }\r\n            dispatch({\r\n                type: OPERACION_ERROR,\r\n                payload: alerta\r\n            })\r\n        }\r\n    }\r\n    \r\n    // agregar nueva operacion\r\n    const agregarOperacion = async operacion => {\r\n\r\n        try {\r\n            const resultado = await clienteAxios.post('/api/operaciones', operacion);\r\n            console.log(resultado);\r\n            // insertar el operacion en el state\r\n            dispatch({\r\n                type: AGREGAR_OPERACION,\r\n                payload: resultado.data\r\n            })\r\n        } catch (error) {\r\n            const alerta = {\r\n                msg: 'Hubo un error',\r\n                categoria: 'alerta-error'\r\n            }\r\n            dispatch({\r\n                type: OPERACION_ERROR,\r\n                payload: alerta\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    // validar el formulario por errores\r\n    const mostrarError = () => {\r\n        dispatch({\r\n            type: VALIDAR_FORMULARIO\r\n        })\r\n    }\r\n\r\n    // selecciona el operacion que el usuario dio click\r\n    const operacionActual = operacionId => {\r\n        dispatch({\r\n            type: OPERACION_ACTUAL,\r\n            payload: operacionId\r\n        })\r\n    }\r\n\r\n    // elimina un operacion\r\n    const eliminarOperacion = async operacionId => {\r\n        try {\r\n            await clienteAxios.delete(`/api/operaciones/${operacionId}`);\r\n            dispatch({\r\n                type: ELIMINAR_OPERACION,\r\n                payload: operacionId\r\n            })\r\n        } catch (error) {\r\n            const alerta = {\r\n                msg: 'Hubo un error',\r\n                categoria: 'alerta-error'\r\n            }\r\n            dispatch({\r\n                type: OPERACION_ERROR,\r\n                payload: alerta\r\n            })\r\n        }\r\n    }\r\n\r\n    // edita o modifica una operacion\r\n    const actualizarOperacion = async operacion => {\r\n        try {\r\n            const resultado = await clienteAxios.put(`/api/operaciones/${operacion._id}`, operacion);\r\n            dispatch({\r\n                type: ACTUALIZAR_OPERACION,\r\n                payload: resultado.data.operacion\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    // elimina la operacion seleccionada\r\n    const limpiarOperacion = () => {\r\n        dispatch({\r\n            type: LIMPIAR_OPERACION\r\n        })\r\n    }\r\n\r\n    // calcular el balance: total ingresos - total egresos\r\n    const calcularBalance = () => {\r\n        dispatch({\r\n            type: CALCULAR_BALANCE\r\n        })\r\n    }\r\n\r\n    return (\r\n        <operacionContext.Provider\r\n            value={{\r\n                operaciones: state.operaciones,\r\n                formulario: state.formulario,\r\n                errorformulario: state.errorformulario,\r\n                operacion: state.operacion,\r\n                mensaje: state.mensaje,\r\n                balance: state.balance,\r\n                mostrarFormulario,\r\n                obtenerOperaciones,\r\n                agregarOperacion,\r\n                mostrarError,\r\n                operacionActual,\r\n                eliminarOperacion,\r\n                actualizarOperacion,\r\n                calcularBalance\r\n            }}\r\n        >\r\n            {props.children}\r\n        </operacionContext.Provider>\r\n    )\r\n}\r\n\r\nexport default OperacionState;"]},"metadata":{},"sourceType":"module"}